trigger:
- main

variables:
  vmImage: 'ubuntu-latest'
  dockerfilePath: '$(Build.SourcesDirectory)/docker/Dockerfile'
  dockerComposePath: '$(Build.SourcesDirectory)/docker/docker-compose.yml'
  dockerRegistryServiceConnection: 'dockerRegistryServiceConnection'
  registryName: 'texyh'

jobs:
  - job: CalculateBuildVersion
    displayName: Calculate Build Version
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: gitversion/setup@0
      displayName: Install GitVersion
      inputs:
        versionSpec: '5.x'
      condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')

    - task: gitversion/execute@0
      displayName: Determine Version

    - script: |
        echo $(GitVersion.SemVer)
      displayName: 'Print Version'
    - script: echo '##vso[task.setvariable variable=buildVersion]$(GitVersion.SemVer)'
      displayName: "Set the build Version as SemVer"
      condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')

    - script: |
        echo $(buildVersion)
      displayName: Debugging

    - script: echo '##vso[task.setvariable variable=buildVersion;isOutput=true]$(buildVersion)'
      name: setVersion
      displayName: 'Export the buildVersion for other jobs'
      
      
  - job: BuildApi
    dependsOn: CalculateBuildVersion
    displayName: "Build api"
    pool:
      vmImage: $(vmImage)
    variables:
      buildVersion: $[ dependencies.CalculateVersion.outputs['setVersion.buildVersion'] ]
      repositoryName: 'user-management'
    steps:
    - task: Docker@2
      displayName: Build Docker Image
      inputs:
        command: build
        repository: $(repositoryName)
        dockerfile: $(dockerfilePath)
        buildContext: $(Build.SourcesDirectory)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(buildVersion)
        arguments: -t $(repositoryName)

    - script: dotnet test tests/UserManagement.UnitTests 
      displayName: Run Unit Tests

    - task: DockerCompose@0
      displayName: 'docker-compose down'
      condition: always()
      inputs:
        containerregistrytype: 'Container Registry'
        dockerComposeFile: $(dockerComposePath)
        action: 'Run a Docker Compose command'
        dockerComposeCommand: 'down --remove-orphans'
      
    - task: DockerCompose@0
      displayName: 'docker-compose up'
      inputs:
        containerregistrytype: 'Container Registry'
        dockerComposeFile: $(dockerComposePath)
        action: 'Run a Docker Compose command'
        dockerComposeCommand: 'up -d --build'

    - script: dotnet test tests/UserManagement.IntegrationTests
      displayName: Run Integration Tests

    - task: DockerCompose@0
      displayName: 'docker-compose down'
      condition: always()
      inputs:
        containerregistrytype: 'Container Registry'
        dockerComposeFile: $(dockerComposePath)
        action: 'Run a Docker Compose command'
        dockerComposeCommand: 'down'

