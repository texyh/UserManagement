trigger:
- main

variables:
  vmImage: 'ubuntu-latest'
  dockerfilePath: '$(Build.SourcesDirectory)/docker/Dockerfile'
  dockerComposePath: '$(Build.SourcesDirectory)/docker/docker-compose.yml'
  dockerRegistryServiceConnection: 'dockerRegistryServiceConnection'
  registryName: 'texyh'
  chartPath: '$(Build.SourcesDirectory)/cicd/chart'
  gitHubServiceConnection: 'texy-devops'

jobs:
  - job: CalculateBuildVersion
    displayName: Calculate Build Version
    pool:
      vmImage: $(vmImage)
    steps:
    - task: gitversion/setup@0
      displayName: Install GitVersion
      inputs:
        versionSpec: '5.x'
      condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')

    - task: gitversion/execute@0
      displayName: Determine Version
      condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')

    - script: |
        echo $(GitVersion.SemVer)
      displayName: 'Print Version'
      condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')

    - script: echo '##vso[task.setvariable variable=buildVersion]$(GitVersion.SemVer)'
      displayName: "Set the build Version as SemVer"
      condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')

    - script: echo '##vso[task.setvariable variable=buildVersion]PR-$(System.PullRequest.PullRequestNumber)'
      displayName: 'Set the buildVersion as PR number'
      condition: ne(variables['Build.SourceBranch'], 'refs/heads/main')

    - script: |
        echo $(buildVersion)
      displayName: Debugging

    - script: echo '##vso[task.setvariable variable=buildVersion;isOutput=true]$(buildVersion)'
      name: setVersion
      displayName: 'Export the buildVersion for other jobs'
      
    - script: |
        sudo snap install yq
        echo "##vso[task.setvariable variable=chartVersion;isOutput=true]$(yq e 'version' $(chartPath)/Chart.yaml)"
      name: setChartVersion
      displayName: 'Parse chart version'

    - script: |
        echo $(chartVersion)
      displayName: Debugging chart version
      
  - job: BuildApi
    dependsOn: CalculateBuildVersion
    displayName: "Build api"
    pool:
      vmImage: $(vmImage)
    variables:
      buildVersion: $[ dependencies.CalculateBuildVersion.outputs['setVersion.buildVersion'] ]
      repositoryName: 'user-management'
    steps:
  
    - script: dotnet test tests/UserManagement.UnitTests 
      displayName: Run Unit Tests

    - task: DockerCompose@0
      displayName: 'docker-compose down'
      condition: always()
      inputs:
        containerregistrytype: 'Container Registry'
        dockerComposeFile: $(dockerComposePath)
        action: 'Run a Docker Compose command'
        dockerComposeCommand: 'down --remove-orphans'
      
    - task: DockerCompose@0
      displayName: 'docker-compose up'
      inputs:
        containerregistrytype: 'Container Registry'
        dockerComposeFile: $(dockerComposePath)
        action: 'Run a Docker Compose command'
        dockerComposeCommand: 'up -d --build'

    - script: dotnet test tests/UserManagement.IntegrationTests
      displayName: Run Integration Tests

    - task: DockerCompose@0
      displayName: 'docker-compose down'
      condition: always()
      inputs:
        containerregistrytype: 'Container Registry'
        dockerComposeFile: $(dockerComposePath)
        action: 'Run a Docker Compose command'
        dockerComposeCommand: 'down'

    - task: Docker@2
      displayName: Build Docker Image
      inputs:
        command: build
        repository: $(repositoryName)
        dockerfile: $(dockerfilePath)
        buildContext: $(Build.SourcesDirectory)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(buildVersion)
        arguments: -t $(repositoryName)

    - task: Docker@2
      displayName: Push image to container registry
      inputs:
        command: push
        repository: $(repositoryName)
        dockerfile: $(dockerfilePath)
        buildContext: $(Build.SourcesDirectory)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(buildVersion)
      condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')

    - task: HelmInstaller@1
      displayName: Install Helm
      inputs:
        helmVersionToInstall: '3.0.2'
      condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')

    - task: AzureCLI@2
      displayName: 'Add ACR repository'
      inputs:
        azureSubscription: 'terraforms-service-connection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: az acr helm repo add --name $(registryName)
      condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')

    - task: HelmDeploy@0
      displayName: Pack the chart
      inputs:
        save: true
        command: 'package'
        updateDependency: true
        chartPath: $(chartPath)
        chartVersion: $(buildVersion)
      condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')

    - task: AzureCLI@2
      displayName: 'Push the chart to ACR'
      inputs:
        azureSubscription: 'terraforms-service-connection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az configure --defaults acr=$(registryName)
          az acr helm repo add
          az acr helm push $(Build.ArtifactStagingDirectory)/$(repositoryName)-$(buildVersion).tgz --force
      condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')

  - job: Release
    dependsOn: [ CalculateBuildVersion, BuildApi ]
    pool:
      vmImage: $(vmImage)
    variables:
      buildVersion: $[ dependencies.CalculateBuildVersion.outputs['setVersion.buildVersion'] ]
      isDraft: ${{ ne(variables['Build.SourceBranch'], 'refs/heads/main') }}
    steps:
    - task: GitHubRelease@1
      displayName: Tag GitHub repository
      inputs:
        gitHubConnection: $(gitHubServiceConnection)
        repositoryName: $(Build.Repository.Name)
        action: 'create'
        target: $(Build.SourceVersion)
        tagSource: 'userSpecifiedTag'
        tag: $(buildVersion)
        changeLogCompareToRelease: 'lastFullRelease'
        changeLogType: 'commitBased'
        isDraft: $(isDraft)
        assets: 

